/**
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2013-2014 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Oracle. Portions Copyright 2013-2016 Oracle. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package net.java.html.json;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/** Can be used in classes annotated with {@link Model} annotation to
 * define a derived property. Value of derived property is based on values
 * of {@link Property} as enumerated by {@link Model#properties()}.
 * <p>
 * The name of the derived property is the name of the method. The arguments
 * of the method must match names and types of some of the properties 
 * from {@link Model#properties()} list. As soon as one of these properties
 * changes, the method is called to recompute its new value. 
 * This applies to inner changes in derived properties as well - e.g.
 * if the dependant property is another type generated by {@link Model @Model} annotation -
 * changes in its own properties trigger recomputation of this derived 
 * property as well (since version 0.9).
 * <p>
 * Method's return type defines the type of the derived property. It may be
 * any primitive type, {@link String}, {@link Enum enum type} or a 
 * type generated by {@link Model @Model} annotation. One may 
 * also return an array by returning a list of such (boxed) type
 * (for example {@link java.util.List List}&lt;{@link String}&gt; or {@link java.util.List List}&lt;{@link Integer}&gt;).
 * <p>
 * An example testing <a target="_blank" href="http://dew.apidesign.org/dew/#7545568">
 * whether a number is a prime</a> using a {@link ComputedProperty} is available
 * on-line.
 *
 * @author Jaroslav Tulach
 */
@Retention(RetentionPolicy.SOURCE)
@Target(ElementType.METHOD)
public @interface ComputedProperty {
    /** Name of a method to handle changes to the computed property.
     * By default the computed properties are read-only, however one can
     * make them mutable by defining a static method that takes
     * two parameters:
     * <ol>
     * <li>the model class</li>
     * <li>the value - either exactly the return the method annotated
     *   by this property or a superclass (like {@link Object})</li>
     * </ol>
     * Sample code snippet using the <b>write</b> feature of {@link ComputedProperty}
     * could look like this (assuming the {@link Model model class} named
     * <em>DataModel</em> has <b>int</b> property <em>value</em>):
     * <pre>
     * {@link ComputedProperty @ComputedProperty}(write="setPowerValue")
     * <b>static int</b> powerValue(<b>int</b> value) {
     *   <b>return</b> value * value;
     * }
     * <b>static void</b> setPowerValue(DataModel m, <b>int</b> value) {
     *   m.setValue((<b>int</b>){@link Math}.sqrt(value));
     * }
     * </pre>
     * 
     * @return the name of a method to handle changes to the computed
     *   property
     * @since 1.2
     */
    public String write() default "";
}
